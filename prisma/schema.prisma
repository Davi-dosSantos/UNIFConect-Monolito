generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())

  profile       Profile?
  offers        Offer[]
  subscriptions Subscription[]
  files         File[] // Um usuário pode fazer upload de muitos arquivos
  resources     Resource[] // Um usuário pode criar muitos recursos
}

model Profile {
  id          String   @id @default(uuid())
  bio         String?
  course      String?
  institution String?
  avatarUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  interests Tag[] @relation("ProfileInterests")
}

model Offer {
  id          String   @id @default(uuid())
  title       String
  description String
  slots       Int
  createdAt   DateTime @default(now())

  offererId String
  offerer   User   @relation(fields: [offererId], references: [id])

  tags          Tag[]
  subscriptions Subscription[]
}

model Tag {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())

  offers    Offer[]
  profiles  Profile[] @relation("ProfileInterests")
  resources Resource[] // Uma tag pode estar em muitos recursos
}

model Subscription {
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  offerId   String
  offer     Offer    @relation(fields: [offerId], references: [id])
  @@id([userId, offerId])
}

model File {
  id           String   @id @default(uuid())
  originalName String   // Nome original do arquivo
  storageKey   String   @unique // Nome único do arquivo salvo no servidor
  path         String   // Caminho para o arquivo no servidor
  mimeType     String   // Tipo do arquivo (ex: "application/pdf")
  sizeInBytes  Int
  createdAt    DateTime @default(now())

  uploaderId String
  uploader   User     @relation(fields: [uploaderId], references: [id])

  resource Resource? // Um arquivo pertence a um recurso
}

model Resource {
  id          String   @id @default(uuid())
  title       String
  description String
  createdAt   DateTime @default(now())

  uploaderId String
  uploader   User     @relation(fields: [uploaderId], references: [id])

  // Relação 1-para-1: Cada recurso tem exatamente um arquivo associado
  fileId String  @unique
  file   File    @relation(fields: [fileId], references: [id])

  tags Tag[] // Um recurso pode ter várias tags
}